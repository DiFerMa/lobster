package SM

Versioning Version {
  major = 1
  minor = 9
}

GFDL_License License {
  invariant_sections = []
}

section "LOBSTER" {

  Text Lobster {
    text = '''The Lightweight Open BMW Software Traceability Evidence Report allows you to 
     demonstrate software traceability and requirements coverage, which is essential for
     meeting standards such as ISO 26262.'''   
  }
}

/***********************************************************************/

section "Tools" {

  Text Tools {
    bullets = [
      '''`lobster-python`: Extract requirements from Python3 code''',   
      '''`lobster-cpp`: Extract requirements from C/C++ code using a clang-tidy hack. ''', 
      '''`lobster-codebeamer`: Extrat requirements from codebeamer.''',
    ]  
  }
}

/***********************************************************************/

section "TRLC" {

  Text Trlc {
    text = '''Treat Requirements Like Code (TRLC). TRLC is a domain-specific language
     for writing (and linking) requirements with meta-data.'''

    bullets = [
      '''lobster-trlc: Extract requirements from trlc code.''',     
    ]
  }
}

/***********************************************************************/
   
section "Python Usage" {
      Grammar Python_File {
        text = '''This tool supports both Python code and PyUnit/unittest unit tests.'''
      }
        Static_Semantics Simple_String_Value {
           text = '''For either code or tests you can embedd tracing tags like this:.'''
          }
        bnf = ''' def potato(self):
              # lobster-trace: something.example
             return "potato"
             '''
  }




/***********************************************************************/

section "C/C++ Usage" {

Grammar Cpp_File{
  text = '''This tool supports C/C++ code.'''
  }
  Static_Semantics Cpp_String_Value {
           text = '''For this you can embedd tracing tags like this:'''
          }
          bnf ='''#include <string>
                  class Potato {
                    public:
                    std::string potato() {
                   // lobster-trace: something.example
                     return "potato";
                           }
                  };'''         

  Static_Semantics Cpp_justifications_Value{
      text = '''You can add justifications as well:'''
  }
       bnf ='''#include <string>
               class Potato {
                  public:
                     std::string potato() {
               // lobster-exclude: Reason to justify the exlude
              return "potato";
                    }
              };'''


}

/***********************************************************************/

Grammar Codebeamer_File{
         text = '''lobster-codebeamer: Extrat requirements from codebeamer.'''
}

 Static_Semantics Codebeamer_String_Value {
   text = '''There are two ways you can use this tool:'''

   bullets = [
    '''Download all requirements mentioned by another lobster trace (this way you do not get a completeness check) (using --import-tagged)'''
    '''Download all requirements generated by a saved codebeamer query (using --import-query)'''
   ]
 }





